/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * main.c
 * Copyright (C) Romain Beuque 2010 <rbeuque@>
 */

#include <stdio.h>

#define TAILLE_MAX 20
#define CHARGE_MAX 100
#define CORRECT 'O'
#define INCORRECT 'P'

int train[TAILLE_MAX];
int nbWagons = 0;

int lireEntier() {
	int entierLu;
	int nbEntiersLus;
	char videTampon;

	do {
		nbEntiersLus = scanf("%d", &entierLu);
		if (nbEntiersLus != 1) {
			printf("Erreur de format : veuillez saisir un entier.\n");

		}
		// vidage du reste du tampon (si plusieurs entiers ou saisie invalide)
		do {
			scanf("%c", &videTampon);
		} while (videTampon != '\n');
	} while (nbEntiersLus != 1);

	return(entierLu);
}

int lireEntierEntreBornes (int borneMin, int borneMax) {
	int noteLue, temp;
	if (borneMin > borneMax) {
		temp = borneMin;
		borneMin = borneMax;
		borneMax = temp;
	}
	do {
		noteLue = lireEntier();
		if (noteLue < borneMin || noteLue > borneMax) {
			printf ("Veuillez entrer une valeur entre %d et %d \n", borneMin, borneMax);
		}
	}
	while (noteLue < borneMin || noteLue > borneMax);
	return noteLue;
}

char resteDeLaPlace () {
	if (nbWagons == TAILLE_MAX) {
		return INCORRECT;
	}
	return CORRECT;
}

void initialiserTrain()
{
	/* initialisation d'un train - nombre wagons 0 - charge wagons - 0 */
	int compteur;
	nbWagons = 0;
	for (compteur = 0; compteur < TAILLE_MAX; compteur ++){
		train[compteur] = 0;
	}
}

void affiche_train(){
	/* affichage état d'un train*/
	int compteur = 0;
	for (compteur = 0; compteur < nbWagons; compteur ++){
		printf("[%3d]-", train[compteur]);
	}
	printf("\n");
}

char ajoutWagon_fin(){
	/* ajout d'un wagon à la fin du train*/
	if ( !resteDeLaPlace()) {
		return INCORRECT;
	}
	printf("Veuillez entrer la charge du nouveau wagon de fin :\n");
	train[nbWagons] = lireEntierEntreBornes(0,CHARGE_MAX);
	nbWagons++;
	return CORRECT;
}

char ajoutWagon_debut(){
	int compteur;
	/* ajout d'un wagon au début du train*/
	if ( !resteDeLaPlace()) {
		return INCORRECT;
	}
	for (compteur = nbWagons; compteur > 0; compteur = compteur -1){
		train[compteur] = train[compteur-1];
	}
	nbWagons++;
	printf("Veuillez entrer la charge du nouveau wagon de tête :\n");
	train[0] = lireEntierEntreBornes(0,CHARGE_MAX);
	return CORRECT;
}

char ajoutWagon_position(){
	/*ajout d'un wagon à une certaine position*/
	if ( !resteDeLaPlace()) {
		return INCORRECT;
	}
	int compteur, position;
	nbWagons++;
	printf("Veuillez entrer la position du nouveau wagon :\n");
	position = lireEntierEntreBornes(1,nbWagons);
	for (compteur = nbWagons; compteur > position; compteur = compteur -1){
		train[compteur-1] = train[compteur-2];
	}
	printf("Veuillez entrer la charge du nouveau wagon (position %3d) :\n", position);
	train[position-1] = lireEntierEntreBornes(0,CHARGE_MAX);
	return CORRECT;
}

void retraitWagons () {
	int compteur, position;
	printf("Veuillez entrer la position du wagon à retirer :\n");
	position = lireEntierEntreBornes(1,nbWagons);
	nbWagons = nbWagons-1;
	for (compteur = position-1; compteur < nbWagons; compteur = compteur +1) {
		train[compteur] = train[compteur+1];
	}
}

void rechercheWagons() {
	int borneMin, borneMax, compteur;
	printf("Veuillez entrer les valeurs min et max des wagons à rechercher.\nBorne Min :\n");
	borneMin = lireEntierEntreBornes(0,CHARGE_MAX);
	printf("Borne Max:\n");
	borneMax = lireEntierEntreBornes(borneMin,CHARGE_MAX);
	printf("\n Wagons concernés : ");
	for (compteur = 0; compteur < nbWagons; compteur = compteur+1) {
		if (train[compteur]<= borneMax && train[compteur] >= borneMin) {
			printf("[%d]-", compteur+1);
		}
	}
	printf("\n\n");
}

int main()
{
	int choix;
	printf("\n ## Application Train ## ");
	initialiserTrain();
	do  {
		if (nbWagons == 0) {
			printf(" \n   ! votre train est vide ! \n \n");
		}
		else { printf("\n~ Votre train : "); affiche_train (); }
		printf("Menu :\n1) Ajouter des wagons\n2) Retirer des wagons\n3) Rechercher des wagons\n4) Réinitialiser les wagons\n\n0 pour quitter\n");
		choix = lireEntier ();
		if (choix == 1) {
			printf("~~~~~\n1) au début \n2) à la fin \n3) à une position donnée \n0 pour retour au menu principal\n");
			choix = lireEntier ();
			if (choix == 1) { ajoutWagon_debut(); }
			if (choix == 2) { ajoutWagon_fin (); }
			if (choix == 3) { ajoutWagon_position (); }
			if (choix == 0) { continue; }
			else continue;
		}
		if (choix == 2) { retraitWagons(); }
		if (choix == 3) { rechercheWagons(); }
		if (choix == 4) { initialiserTrain(); }
		if (choix == 0) { break;}
		else {continue;}
		printf("\n");
	} 	while (choix != '0');

/* INITIALISATION CODAGE
	nbWagons = 5;
	train[0]=40; train[1]=100; train[2]=70; train[3]=20; train[4]=100;
	affiche_train();
	ajoutWagon_debut();
	ajoutWagon_fin();

	ajoutWagon_position();
	affiche_train();
	ajoutWagon_fin();
	affiche_train();
	ajoutWagon_fin();
	affiche_train();
	ajoutWagon_debut();
	affiche_train();
	printf("Nombre de wagons: %d \n", nbWagons);
	retraitWagons();
	affiche_train();
	printf("Nombre de wagons: %d \n", nbWagons);
	rechercheWagons();*/
	return (0);
}
